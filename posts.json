[
	{
		"id": "8de7a320fab593608581d0e0dab53ac6",
		"title": "Next up for authentication",
		"content": "*Editor's note: \"authentification\" is not an english word. German and french authors, please fix your grammar!*\r\n\r\n- `redirect_to`/`Referer` (*Editor's note: HTTP/2.0 fixes the \"Referer\"?*)\r\n- ~~check auth also on `POST/DELETE /posts/{id}`~~\r\n    - `/posts/new`, `/posts/edit` are also checked\r\n- maybe hide edit stuff for logged-out users\r\n- implement `/logout`\r\n- add ui for `/login`/`logout`\r\n- ~~allow no auth at all again!~~\r\n- ~~catch multiple logins (just redirect/notify, don't set cookie again.~~",
		"created": "2015-03-13T14:19:07.261669029+01:00"
	},
	{
		"id": "57b89c8d2c370bd8a2ebc73452b0d71f",
		"title": "Refactor routes",
		"content": "The dream:\r\n\r\n```go\r\n// main.go\r\n\r\n// hypothetical router api\r\nrouter.Route(\"/login\", LoginHandler)\r\nrouter.Router(\"/posts\", PostsApi)\r\nif development {\r\n    router.Route(\"/assets\", AssetsHandler)\r\n}\r\n```",
		"created": "2015-03-13T12:09:25.810878999+01:00"
	},
	{
		"id": "81df52090942dabfe2702afbfffceb51",
		"title": "A bunch of ideas",
		"content": "- `.Meta`: stores *arbitrary data*\r\n    - backends decide what to do with it, can decide to ignore it\r\n    - intended to store backend-specific data and/or pass data through to the backend\r\n        - thus we need to change our backend interface to receive this data, especially the `Find` method\r\n        - one use-case is for the hypothetical datomic backend: to allow specifying the timestamp/transaction to use for retrieving data (`?meta[t]=\u003ct\u003e`)\r\n    - useful for prototyping\r\n        - e.g. try how tags, groups, public/private posts, drafts, etc would work, without having to modify *all* the backends at first\r\n    - there *is* the danger of using it for everything, but we'll have to resist it. and see how it works out\r\n- static rendering\r\n    - for our own docs, deployed on GitHub Pages (maybe even automatically by TravisCI?)\r\n    - we can reuse all our templates, for now just hide the edit buttons via CSS (`display: none` is your friend, but surely there's a better solution)\r\n- `gol migrate \u003csrc\u003e \u003cdest\u003e` (maybe call it `sync` or `push`?)\r\n    - `json` too slow? just switch to `sqlite`!\r\n    - schema change? `gol migrate`!\r\n    - hypothetical: don't like jekyll/wordpress, just use `gol migrate` (or the reverse: don't want to write your posts as files, but *do* want to use it for deployment/already have a cool style/whatever? use `gol migrate`)\r\n- misc:\r\n    - a shortcut for enabling the fullscreen mode\r\n    - a shortcut for submitting a post (`Ctrl-Enter`)\r\n    - we need a tool (or make it easy) to generate password hashes, you don't want to give your password to someone to get an account on their `gol` instance. (but we still don't want to do \"regular\" user management, e.g. via an API, with registration and all those things. just make it to do (for developers).)\r\n",
		"created": "2015-03-10T18:53:14.20129402+01:00"
	},
	{
		"id": "cc826404d2faf080ba9d1738d4a5e8b6",
		"title": "Introducing the query interface",
		"content": "## For users\r\n\r\nYou can search posts now!\r\n\r\nFind all kittens here: \u003chttp://notes.papill0n.org/?match=content:kitten\u003e\r\n\r\n## For developers\r\n\r\nWant to find out what posts about cats you wrote in the last week? Here you go:\r\n\r\n```go\r\nnow := time.Now()\r\nq, _ := storage.Query().\r\n            Match(\"content\", \"cat\").\r\n            Range(now.Add(-7*24*time.Hour), now)\r\n```\r\n\r\n## What's missing/open questions\r\n\r\n- default to `reverse` when sorting by created?\r\n- how should multiple matches be handled?\r\n    - the current implementation handles it as `AND`\r\n    - would be handy to have `match=content:cat\u0026match=content:kitten` return all results involving cats *OR* kittens",
		"created": "2015-03-09T14:51:58.791656315+01:00"
	},
	{
		"id": "2563f0d12a97f66cefeaaa2e6be6d1e1",
		"title": "Imagining the ideal routing/request API",
		"content": "There are a few things that we do that are currently... at least suboptimal:\n\n- `r.Method == \"GET\"`\n- `r.Header.Get(\"Content-Type\") == \"application/json\"\n- `/posts` != `/posts/`?\n\nThere should be a \"pretty\"/well-engineered way to do this. I.e., we're going to have to either find a library that does what we want or write one ourselves. Let's think about how the code should look like.\n\n```go\nrouter.Match(\"/posts\", func(w http.ResponseWriter, r *http.Request) {\n    renderer := negotiate(r) // if we don't find one, it'll be an error renderer?\n    renderer.render(w)\n})\n```",
		"created": "2015-03-06T18:54:22.811328282+01:00"
	},
	{
		"id": "72dee39f0afe3c51a7faf77f5767b113",
		"title": "Authentication and users",
		"content": "*Note: These are two topics, one is possible without the others, because we don't need to support management of users, just authenticating them.*\r\n\r\n## Authentication\r\n\r\n- pluggable (already implemented, `ldap` and `insecure` exist, something with hashes instead of password still to be done)\r\n- the ruby on rails tutorial has a very good, in-depth tutorial on how to roll your own session management, which we need to do\r\n    - [Chapter 8 - Log in, log out](https://www.railstutorial.org/book/log_in_log_out)\r\n    - we can use [bcrypt](http://godoc.org/golang.org/x/crypto/bcrypt) to hash the passwords\r\n- for each request, we need to check whether the user is logged in (indicated by a cookie)\r\n- if not, we need to redirect to a login page\r\n- maybe we can do the checking in a middleware?\r\n\r\nOops, there are several variants of authentication:\r\n\r\n- require login on *all* pages\r\n- require login for editing\r\n- require login (and correct user) for private posts\r\n\r\n## Posts by users\r\n\r\nAfter we have working authentication, we can implement \"user posts\", e.g. users can only edit their own posts, not those of others.\r\n\r\n## Resources\r\n\r\n- https://www.railstutorial.org/book/log_in_log_out\r\n- http://godoc.org/golang.org/x/crypto/bcrypt\r\n- various go libraries/middlewares:\r\n    - [permissions2](https://github.com/xyproto/permissions2), has all things (including registering, password reset, ...), but requires a redis connection\r\n    - [render](https://github.com/unrolled/render), multiple rendering backends, e.g. HTML, JSON, ... (no content-negotiation, though)\r\n    - [sessions](https://github.com/goincremental/negroni-sessions): cookies, even encrypted ones\r\n    - [nregroni middlewares](https://github.com/codegangsta/negroni#third-party-middleware), some of these are usable without nigroni\r\n\r\nA few more thoughts, mainly about the code, are [on notes.papill0n.org](http://notes.papill0n.org/posts/c3a339291953a1a004443bea219b04db).",
		"created": "2015-03-06T17:15:37.821841211+01:00"
	},
	{
		"id": "5c006f42cf92323afddba19d5cf5a619",
		"title": "Changing the templates",
		"content": "The templates are now in `templates/*.tmpl` and `templates/shared/*.tmpl`.\r\n\r\nAfter changing them, you need to restart the server to see your changes. If you don't want to do this, you can use [our fork of gin](https://github.com/heyLu/gin) (install with `go get -v github.com/heyLu/gin`) which has support for restarting when the templates change.\r\n\r\nThere's also a `make` target for this: run `make watch` to watch `.go` and `.tmpl` files and then start changing things!",
		"created": "2015-03-06T11:01:52.161004308+01:00"
	},
	{
		"id": "afba23f74deef888d8b5902bb91dcd19",
		"title": "Ideas for tomorrow",
		"content": "- LDAP\r\n- ~~sqlite backend~~\r\n- ~~markdown preview (tabbed)~~\r\n- ~~render single posts (see above)~~ (simply uses the `posts` template, passing only one post)\r\n- experiment with post types\r\n- more tests\r\n\r\n## later\r\n\r\n- user accounts\r\n- public streams",
		"created": "2015-03-05T19:48:22.614542642+01:00"
	},
	{
		"id": "a744e085d800e262c60414c26390f62c",
		"title": "Hello pluggable backends!",
		"content": "E.g. we're where we were this morning, but with *much* better architecture!",
		"created": "2015-03-05T17:19:18.125457555+01:00"
	},
	{
		"id": "ca804c7840bd1cbf10be86f129272f51",
		"title": "Overnight ideas",
		"content": "- post `types`\r\n\r\n    - add `type` field to `Post`\r\n    - example types: (image, video, media), quote, short, link)\r\n    - generate different html based on that, editing means editing the generated html (no additional \"types\" in db)\r\n\r\n    [![medium \"blog\" mockup](https://d262ilb51hltx0.cloudfront.net/max/800/1*-WhHEIYNclJIXl4qk0M9IA.png)](https://medium.com/inside/blogging-on-medium-95f1546bcd7d#b8de)\r\n- markdown cheatsheet (common syntax blurgh + link to full docs/examples, `shift-tab`)\r\n\r\n    \u003e Markdown works like this ...\r\n\r\n    \u003e Or edit the [example post](/post/hgkjdshgkjdsgdsgds)\r\n- quick posting (text field on index page for short posts, suggest \"full edit\" if too long)\r\n- rss feed",
		"created": "2015-03-05T09:53:54.32336066+01:00"
	},
	{
		"id": "2e17c142291319144a7951d0c8dfce08",
		"title": "More crazy ideas",
		"content": "- a public feed\r\n- groups\r\n- ~~make the title on the index page customizable (just \"gol\" sounds weird, maybe use the hostname if it's not localhost?)~~ (handled by moving to `.tmpl`)\r\n- ...",
		"created": "2015-03-04T17:55:10.586950061+01:00"
	},
	{
		"id": "0d585f4331987cbdb001cf1cfae38ff1",
		"title": "Tomorrow",
		"content": "- ~~pair on pluggable storage backends (json together~~, then Andreas sqlite and Lucas datomic)\r\n- ~~escape cancels post editing (*with* confirmation)~~ doesn't work materialize modal + escape closes the modal immeditately, maybe later\r\n- ~~listen on `$PORT`~~\r\n- ~~support specifying a location for `posts.json` (for local deployment)~~\r\n- see [other ideas](/#post-f02d5a77c0f4a4953b856e5397df3d01)\r\n\r\n![unicorn](https://lilymichaud.files.wordpress.com/2007/09/unicorns_csg010.jpg)",
		"created": "2015-03-04T17:50:24.03373836+01:00"
	},
	{
		"id": "591535c0630cf20e86cc2b5898283fbd",
		"title": "Get some math!",
		"content": "A little bit of [wavelet](http://en.wikipedia.org/wiki/Wavelet) transformation:\r\n\r\n\u003cp\u003e$$x_a(t)=\\int_\\mathbb{R} WT_\\psi\\{x\\}(a,b)\\cdot\\psi_{a,b}(t)\\,db$$\u003c/p\u003e\r\n\r\n- because `_` are interpreted like `*` in markdown, you have to surround your math expressions with html tags, i.e. `\u003cp\u003e` or `\u003cspan\u003e`\r\n",
		"created": "2015-03-04T16:40:30.878546539+01:00"
	},
	{
		"id": "be49d7851372d54993af097ecc3be40a",
		"title": "Pluggable storage backends",
		"content": "We want to support multiple storage backends, at least `json` (continuing to support the current data), `sqlite` (or `sql` in general, as the driver is general anyway?). and maybe we can even support `datomic`, which would make Lucas very happy!\r\n\r\n## What do we need?\r\n\r\n- store posts (create, update, delete, list)\r\n- store users (or at least it should be clear how to add support for users)\r\n\r\nOptional/fun:\r\n\r\n- search/querying (by date, reversed, by title, by matching title, by content, ...)\r\n\r\n## How could the interface look like?\r\n\r\n```go\r\n// storage_json is the package with the json backend\r\nstorage := storage_json.Open(\"posts.json\")\r\n\r\n// finding and updating posts\r\ntheAnswer, err := storage.FindPostById(\"42\")\r\ntheAnswer.Content = \"42\"\r\n\r\nerr = storage.Save(theAnswer)\r\n\r\n// creating posts\r\nnewPost := Post{/* ... */}\r\nerr = storage.Save(newPost) // maybe .Create?\r\n\r\n// maybe?\r\nstorage.Reload() // == storage_json.Open(\"...\") ??\r\n```\r\n\r\n## Questions\r\n\r\n- how do we \"coordinate\" ids for new posts?\r\n    \r\n    i.e. should storing a post generate the post id or should we do it ourselves?\r\n\r\n    i think we should generate it, could there be problems with that? (it seems a bit more \"go style\" to do it ourselves, because the storage backend should just store, not generate things. but i'm still not entirely sure.)\r\n- with the above design, adding users would result in new methods...",
		"created": "2015-03-04T16:38:44.958490933+01:00"
	},
	{
		"id": "8d182373c04316b42a433bb63be69014",
		"title": "Sanity check",
		"content": "## *Aka* let's see what we can do here...\r\n\r\nWe allow inline elements, like \u003ca href=\"/\"\u003ethis \u003cem\u003eshiny\u003c/em\u003e link\u003c/a\u003e, which even has an `em` element in it.\r\n\r\nWe also allow embedding images, at least I hope so, because we **need** kittens!\r\n\r\n\u003cimg src=\"http://www.helpinganimals.org/wp-content/uploads/2014/09/kitten_19023.jpg\" width=\"600px\" /\u003e\r\n\r\nWe also allow `iframe`s, even though we probably should restrict them to youtube and vimeo.\r\n\r\n\u003ciframe width=\"600\" height=\"400\" src=\"https://www.youtube.com/embed/598IdFlOXcQ\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e",
		"created": "2015-03-04T14:03:45.384663865+01:00"
	},
	{
		"id": "558371d54ced7614a8df578ae654de05",
		"title": "Extract templates from main.go",
		"content": "- in a seperate package `templates`\r\n- each template goes into a separate file, e.g. `templates/post_new.go`\r\n\r\n\r\n    ```go\r\n    // templates/post_new.go\r\n    package templates\r\n    \r\n    import (...)\r\n    \r\n    var postNewTemplate = `\r\n    YAY!\r\n    `\r\n    ```\r\n\r\n- we collect *all* templates in `templates/main.go`, which exports **one** variable with templates\r\n\r\n\r\n    ```go\r\n    // templates/main.go\r\n    package templates\r\n    \r\n    import (...)\r\n    \r\n    var templateFuncs = template.FuncMap{}\r\n    \r\n    var Template = template.New(\"\").Funcs(templateFuncs)\r\n\r\n    Template.New(\"post.new\").Parse(newPostTemplate)\r\n    ```",
		"created": "2015-03-04T13:27:20.851740984+01:00"
	},
	{
		"id": "3f6de12f8af172b7b52c017f4d0ce971",
		"title": "Maybe?",
		"content": "## Let's start with a heading...\r\n\r\nWriting some meaningful prose, and then, for *very* dramatic effect -- a list:\r\n\r\n * one\r\n * two\r\n * three\r\n\r\nWill that work? And even more adventurous, does *the following* work?\r\n\r\n1. that\r\n2. would\r\n3. be\r\n4. ***awesome!!1!***",
		"created": "2015-03-04T12:26:41.409624027+01:00"
	},
	{
		"id": "f02d5a77c0f4a4953b856e5397df3d01",
		"title": "Next up",
		"content": "- ~~list support (c'mon blackfriday)~~ (it wasn't blackfriday, but materialize)\r\n- users (including ldap)\r\n- ~~pluggable storage backends~~\r\n- tests! (~~at least some~~; some more, please!)\r\n- ~~markdown preview (either live or tabbed)~~\r\n- ~~cancel new post/edit~~\r\n- ~~mathjax support~~\r\n- ~~css *blingbling* :)~~",
		"created": "2015-03-04T12:01:55.115207523+01:00"
	},
	{
		"id": "8f04a5ad262b2bba34240303a920c87d",
		"title": "another change, another post.",
		"content": "an idea: why don't we use `gol` for editing/posting our changelog?",
		"created": "2015-03-03T18:53:46.707429592+01:00"
	},
	{
		"id": "5",
		"title": "Hello C!",
		"content": "```C\r\nint main() {\r\n     return 0;\r\n}\r\n```\r\n\r\nCan we do stuff now?\r\n\r\nIt seems that we can?!",
		"created": "2015-03-03T14:30:47.061273279+01:00"
	},
	{
		"id": "4",
		"title": "Hey, this is getting quite ... usable?",
		"content": "",
		"created": "2015-03-03T14:28:09.655798222+01:00"
	},
	{
		"id": "3",
		"title": "Another post...",
		"content": "Well, \"hello\" is getting old, what about **HELLO!!!!!!!11!!!**?\r\n\r\nAh, that's much nicer!\r\n\r\n(!!!!!!1!!)\r\n\r\nNow for something else...\r\n\r\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jcEws7il4EY\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e",
		"created": "2015-03-03T13:53:17.693708955+01:00"
	},
	{
		"id": "2",
		"title": "Let's see where this ends up...!",
		"content": "Should be in the middle.",
		"created": "2015-03-03T13:40:01.265284209+01:00"
	},
	{
		"id": "1",
		"title": "Tadum!",
		"content": "Hello again... (with time???)",
		"created": "2015-03-03T13:36:01.265284209+01:00"
	}
]